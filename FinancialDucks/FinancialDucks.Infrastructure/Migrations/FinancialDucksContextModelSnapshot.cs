// <auto-generated />
using System;
using FinancialDucks.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinancialDucks.Infrastructure.Migrations
{
    [DbContext(typeof(FinancialDucksContext))]
    partial class FinancialDucksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.BudgetLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Budget")
                        .HasColumnType("money");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("BudgetLines");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<HierarchyId>("HierarchyId")
                        .IsRequired()
                        .HasColumnType("hierarchyid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Starred")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "NonClusteredIndex-20220402-121716")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.CategoryRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("AmountMax")
                        .HasColumnType("money");

                    b.Property<decimal?>("AmountMin")
                        .HasColumnType("money");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateMax")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateMin")
                        .HasColumnType("datetime");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<string>("SubstringMatch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryRules");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.ScraperCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Selector")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TimeoutSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((30))");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SourceId", "Sequence" }, "IX_ScraperCommands")
                        .IsUnique();

                    b.ToTable("ScraperCommands");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.SourceSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("SourceSnapshots");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.TransactionCategory", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.ToView("TransactionCategories");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.TransactionSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("TransactionSources");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.TransactionSourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TransactionSourceTypes");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.BudgetLine", b =>
                {
                    b.HasOne("FinancialDucks.Infrastructure.Models.Category", "Category")
                        .WithMany("BudgetLines")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_BudgetLines_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.CategoryRule", b =>
                {
                    b.HasOne("FinancialDucks.Infrastructure.Models.Category", "Category")
                        .WithMany("CategoryRules")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryRules_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.ScraperCommand", b =>
                {
                    b.HasOne("FinancialDucks.Infrastructure.Models.TransactionSource", "Source")
                        .WithMany("ScraperCommands")
                        .HasForeignKey("SourceId")
                        .IsRequired()
                        .HasConstraintName("FK_ScraperCommands_TransactionSources");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.SourceSnapshot", b =>
                {
                    b.HasOne("FinancialDucks.Infrastructure.Models.TransactionSource", "Source")
                        .WithMany("SourceSnapshots")
                        .HasForeignKey("SourceId")
                        .IsRequired()
                        .HasConstraintName("FK_SourceSnapshots_TransactionSources");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.Transaction", b =>
                {
                    b.HasOne("FinancialDucks.Infrastructure.Models.TransactionSource", "Source")
                        .WithMany("Transactions")
                        .HasForeignKey("SourceId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_TransactionSources");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.TransactionSource", b =>
                {
                    b.HasOne("FinancialDucks.Infrastructure.Models.TransactionSourceType", "Type")
                        .WithMany("TransactionSources")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionSources_TransactionSourceTypes");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.Category", b =>
                {
                    b.Navigation("BudgetLines");

                    b.Navigation("CategoryRules");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.TransactionSource", b =>
                {
                    b.Navigation("ScraperCommands");

                    b.Navigation("SourceSnapshots");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FinancialDucks.Infrastructure.Models.TransactionSourceType", b =>
                {
                    b.Navigation("TransactionSources");
                });
#pragma warning restore 612, 618
        }
    }
}
