@using FinancialDucks.Application.Features
@using MediatR
<div class="modal fade" id=@(nameof(TransactionImportDialog)) tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalLabel">Import Transactions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cancel"></button>
      </div>
      <div class="modal-body">
          @ImportMessage
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
      </div>
    </div>
  </div>
</div>

@code 
{
    [Inject]
    public IMediator Mediator { get; set; }

    [Parameter]
    public DateTime? ImportRequestTime { get; set; }

    public string ImportMessage { get; private set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        if (ImportRequestTime == null)
            return;

        await RefreshTransactionsFromDisk();
    }

    public async Task RefreshTransactionsFromDisk()
    {
        ImportMessage = $"Downloading transactions...";
        var downloadedFiles = await Mediator.Send(new WebTransactionExtractorFeature.Query());

        ImportMessage = $"Reading transactions from disk...";
        StateHasChanged();

        //var localTransactions = await Mediator.Send(new ReadLocalTransactions.Request());

        //ImportMessage = $"Read {localTransactions.Count()} transactions from disk. Syncing with database...";
        //StateHasChanged();

        //var newRecords = await Mediator.Send(new UploadTransactions.Command(localTransactions));
        //if (newRecords.Any())
        //    ImportMessage = $"Inserted {newRecords.Count()} transactions into database.";
        //else
        //    ImportMessage = $"No new transactions to insert.";

        ////UpdateCurrentFilter();
        //StateHasChanged();
    }
}
